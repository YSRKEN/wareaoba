/* 戦場のカメラマン 青葉 Ver.2.0 */

	#packopt name "wareaoba"
	#include "hspcv.as"
	#include "hspext.as"
	#include "SearchKanCollePos.as"
	onexit gosub *exit

/* マクロ宣言 */
	#define kSoftName "戦場のカメラマン 青葉"
	#define ctype POS_X(%1) (%1) * kObjSpaceX + kObjSpace
	#define ctype POS_Y(%1) (%1) * kObjSpaceY + kObjSpace
	#define POS_XY(%1, %2) pos POS_X(%1), POS_Y(%2)
	#define ctype SIZE_X(%1) (%1) * kObjSpaceX - kObjSpace
	#define ctype SIZE_Y(%1) (%1) * kObjSpaceY - kObjSpace

/* 定数宣言 */
	// 画面ID
	#enum kMainWindowID = 0	;メイン画面のID
	#enum kSelectWindowID	;選択画面のID
	#enum kDesktopBufferID	;デスクトップのスクショを保存するためのID
	#enum kFlashBufferID	;艦これの画面を保存するためのID
	#enum kCheckBufferID	;ズレ検出用のID
	#enum kOptionWindowID	;オプション画面のID
	#enum global kTempBufferID	;Temporary用バッファのID
	#enum kRingBufferID		;リングバッファの最初のID
	// CV画面ID
	#enum global kCVDesktopBufferID = 0
	#enum global kCVFlashBufferID
	// オブジェクト
	#const global kFlashWX 800
	#const global kFlashWY 480
	#const kObjX 70			;ボタン等のオブジェクトの大きさ
	#const kObjY 20
	#const kObjSpace 10		;オブジェクトの間隔
	#const kObjSpaceX kObjX + kObjSpace
	#const kObjSpaceY kObjY + kObjSpace
	#const kMainWX POS_X(3)	;メイン画面の大きさ
	#const kMainWY POS_Y(10)
	#const kLargeFontSize 30	;フォントサイズ
	// 座標取得モード
	#enum kGetPosAuto = 0	;オート(デスクトップのスクショから自動認識)
	#enum kGetPosClick		;クリック(クリックしたウィンドウから認識)
	#enum kGetPosCrop		;クロップ(選択した領域から認識)
	#enum kGetPosManual		;マニュアル(選択範囲そのまま。周囲の同色領域はトリミングする特殊モード)
	// キーボード・マウス操作
	#const kStickCtrl   64
	#const kStickEscKey 128
	#const kStickMouse  256
	#const kStickMouseR 512
	// ファイルタイプ
	#enum kFileTypeBmp = 0
	#enum kFileTypePng
	#enum kFileTypeJpeg
	// 保存方法
	#enum kSaveTypePast = 0
	#enum kSaveTypeNow
	#enum kSaveTypeFuture
	// その他
	#const global TRUE  1
	#const global FALSE 0
	#const global kRectDim 4		;「座標2つ」「オフセットと座標」における次元数
	#const global kPosDim 2			;「座標1つ」「オフセット」における次元数
	#const kMaxSaveBufferSize 49	;保存位置前後の最大フレーム数
	#const kMaxFrameRate 60			;最大フレームレート

/* 変数初期化 */
	sdim soft_log, 32000
	;座標設定
	dim window_param, kRectDim	;ウィンドウのオフセットとサイズ
	dim flash_position, kPosDim	;艦これの画面のオフセット
	get_pos_flg = FALSE
	;画面サイズ(0,0と1,0が艦これの場合、0,1と1,1の場合がマニュアルモードの場合)
	dim game_window_size, kPosDim, 2
		game_window_size(0, 0) = kFlashWX
		game_window_size(1, 0) = kFlashWY
		game_window_size(0, 1) = game_window_size(0, 0)	;とりあえずコピー
		game_window_size(1, 1) = game_window_size(1, 0)
	;GUI設定
	sdim save_buffer_size_list, 1024
	repeat kMaxSaveBufferSize, 1
		save_buffer_size_list += str(cnt) + "枚\n"
	loop
	sdim frame_rate_list, 1024
	repeat kMaxFrameRate, 1
		frame_rate_list += str(cnt) + "fps\n"
	loop
	;その他初期設定
	sdim folder_path, 260						;フォルダパス
	is_special_size_flg = FALSE					;取得画像サイズが800x480ならFALSE
	exe_path = dir_cur
	LoadSoftData

/* モジュール */
	#module api
		// APIを呼び出すための宣言
		#uselib "gdi32.dll"
			#func  BitBlt "BitBlt" int,int,int,int,int,int,int,int,int
			#cfunc CreateDC "CreateDCA" sptr,sptr,sptr,int
			#func  DeleteDC "DeleteDC" int
		#uselib "user32.dll"
			#cfunc GetSystemMetrics "GetSystemMetrics" int
			#cfunc GetWindowDC "GetWindowDC" int
			#func  GetWindowRect "GetWindowRect" int, int
			#func  ReleaseDC "ReleaseDC" int, int
			#cfunc WindowFromPoint "WindowFromPoint" int, int
		// APIを呼び出すための定数宣言
		#const NULL 0
		#const SRCCOPY    0x00CC0020
		#const CAPTUREBLT 0x40000000
		#const SM_XVIRTUALSCREEN  0x0000004C
		#const SM_YVIRTUALSCREEN  0x0000004D
		#const SM_CXVIRTUALSCREEN 0x0000004E
		#const SM_CYVIRTUALSCREEN 0x0000004F
		// モニタ全体のオフセットとサイズを取得する
		#deffunc GetDesktopParam array desktop_param
			desktop_param(0) = GetSystemMetrics(SM_XVIRTUALSCREEN)
			desktop_param(1) = GetSystemMetrics(SM_YVIRTUALSCREEN)
			desktop_param(2) = GetSystemMetrics(SM_CXVIRTUALSCREEN)
			desktop_param(3) = GetSystemMetrics(SM_CYVIRTUALSCREEN)
		return
		// デスクトップのスクリーンショットを取得する
		#deffunc DesktopScreenShot int desktop_buffer_id, array desktop_param
			;保存用のバッファを初期化する
			buffer desktop_buffer_id, desktop_param(2), desktop_param(3)
			;デスクトップのデバイスコンテキストを作成する
			hdc_screen = CreateDC ("DISPLAY", NULL, NULL, NULL)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, desktop_param(2), desktop_param(3), hdc_screen, desktop_param(0), desktop_param(1), SRCCOPY | CAPTUREBLT
			;デバイスコンテキストを削除する
			DeleteDC hdc_screen
		return
		// 艦これの画面を探索する
		#deffunc FlashPositionSearch int desktop_buffer_id, array flash_position
			// デスクトップのスクショをCVバッファに入れる
			gsel desktop_buffer_id
			if((ginfo_sx < kFlashWX) || (ginfo_sy < kFlashWY)) :return
			cvbuffer kCVDesktopBufferID, ginfo_sx, ginfo_sy
			cvputimg kCVDesktopBufferID
			// 800x480の灰色画面の周囲に1ピクセルの白枠を付けたものをCVバッファに入れる
			gsel kFlashBufferID@
			color 100, 100, 100
			boxf 1, 1, kFlashWX, kFlashWY
			cvbuffer kCVFlashBufferID, kFlashWX, kFlashWY
			cvputimg kCVFlashBufferID
			// マッチング処理を行う
			cvmatch flash_position(0), flash_position(1), CV_TM_SQDIFF, kCVFlashBufferID, kCVDesktopBufferID
			// 「1ピクセルの白枠」の分だけ補正処理を行う
			flash_position(0) += 1
			flash_position(1) += 1
		return
		// ゲームの画面を探索する
		#deffunc GamePositionSearch int desktop_buffer_id, array square, array flash_position, array game_window_size
			buffer kTempBufferID,
			gsel desktop_buffer_id
			pget square(0), square(1)
			GetSquare px, py, wx, wy, square, ginfo_r, ginfo_g, ginfo_b
			flash_position(0) = px
			flash_position(1) = py
			game_window_size(0, 1) = wx
			game_window_size(1, 1) = wy
		return
		// 指定した点におけるウィンドウのハンドルを取得する
		#defcfunc GetWindowHandle array flash_point
		return WindowFromPoint(flash_point(0), flash_point(1))
		// 指定したハンドルにおけるオフセットとサイズを取得する
		#deffunc GetWindowParam int window_handle, array window_param
			dim rect, kRectDim
			GetWindowRect window_handle, varptr(rect)
			window_param(0) = rect(0)
			window_param(1) = rect(1)
			window_param(2) = rect(2) - rect(0)
			window_param(3) = rect(3) - rect(1)
		return
		// ウィンドウのスクリーンショットを取得する
		#deffunc WindowScreenShot int window_buffer_id, int window_handle, array window_param
			;保存用のバッファを初期化する
			buffer window_buffer_id, window_param(2), window_param(3)
			;ウィンドウのデバイスコンテキストを作成する
			hdc_window = GetWindowDC(window_handle)
			;ウィンドウの画像をコピーする
			BitBlt hdc, 0, 0, window_param(2), window_param(3), hdc_window, 0, 0, SRCCOPY | CAPTUREBLT
			;デバイスコンテキストを削除する
			ReleaseDC window_handle, hdc_window
		return
		// 艦これの画面のスクリーンショットを取得する
		#deffunc FlashScreenShot int flash_buffer_id, int window_handle, array flash_position
			DesktopScreenShot kDesktopBufferID@, desktop_param@
			buffer flash_buffer_id, game_window_size@(0, 1), game_window_size@(1, 1)
			gcopy kDesktopBufferID@, flash_position@(0), flash_position@(1), game_window_size@(0, 1), game_window_size@(1, 1)
		return
		#defcfunc CheckMoveFlash int window_handle, array flash_position
			;ズレ検出用定数
			;左上・右上・右下・左下・上・右・下・左
			pos_x1 = game_window_size@(0, is_special_size_flg@) / 2
			pos_x2 = game_window_size@(0, is_special_size_flg@) + 1
			pos_y1 = game_window_size@(1, is_special_size_flg@) / 2
			pos_y2 = game_window_size@(1, is_special_size_flg@) + 1
			check_x.0 = 0, pos_x2, pos_x2,      0, pos_x1, pos_x2, pos_x1,      0
			check_y.0 = 0,      0, pos_y2, pos_y2,      0, pos_y1, pos_y2, pos_y1
			move_x.0 = 1, -1, -1,  1,  0, -1,  0,  1
			move_y.0 = 1,  1, -1, -1,  1,  0, -1,  0
			gsel kCheckBufferID@
			;デスクトップのデバイスコンテキストを作成する
			hdc_window = GetWindowDC(window_handle)
			;デスクトップの画像をコピーする
			BitBlt hdc, 0, 0, game_window_size@(0, is_special_size_flg@) + 2, game_window_size@(0, is_special_size_flg@) + 2, hdc_window, flash_position(0) - 1, flash_position(1) - 1, SRCCOPY | CAPTUREBLT
			;デバイスコンテキストを削除する
			ReleaseDC window_handle, hdc_window
			;RGB値で判定する。四隅と各辺の中央の色を取得し、1つでも違うものがあればアウト
			dim clr, 8
			for k, 0, 8
				pget check_x(k), check_y(k)
				clr(k) = (ginfo_r * 1000 + ginfo_g) * 1000 + ginfo_b
			next
			auto_set_flg = FALSE
			if((clr(0) != clr(1)) && (clr(1) == clr(2))){
				flash_position(0) += move_x(0)
				flash_position(1) += move_y(0)
				auto_set_flg = TRUE
			}else{
				for k, 1, 8
					if(clr(0) != clr(k)){
						flash_position(0) += move_x(k)
						flash_position(1) += move_y(k)
						auto_set_flg = TRUE
						_break
					}
				next
			}
		return auto_set_flg
	#global
	#module misc
		#const EM_SCROLL 0x00B5
		#const SB_BOTTOM 7
		// 最大値
		#defcfunc max int param_1, int param_2
			if(param_1 > param_2) :return param_1
		return param_2
		// 最小値
		#defcfunc min int param_1, int param_2
			if(param_1 < param_2) :return param_1
		return param_2
		// ログに追記
		#deffunc PutLog str message
			soft_log@ += message + "\n"
			gsel kMainWindowID@
			objprm 0, soft_log@
			sendmsg hMesBox@, EM_SCROLL, SB_BOTTOM, 0
		return
		// 現在時刻を取得
		#defcfunc NowTime
		return strf("%04d-%02d-%02d %02d-%02d-%02d-%03d", gettime(0), gettime(1), gettime(3), gettime(4), gettime(5), gettime(6), gettime(7))
		// 長方形枠を描画
		#deffunc DrawMouseSquare int mouse_x1, int mouse_y1, int mouse_x2, int mouse_y2
			square_x1 = min(mouse_x1, mouse_x2)
			square_y1 = min(mouse_y1, mouse_y2)
			square_x2 = max(mouse_x1, mouse_x2)
			square_y2 = max(mouse_y1, mouse_y2)
			color 0, 255, 255
			line square_x1, square_y1, square_x2, square_y1
			line square_x2, square_y1, square_x2, square_y2
			line square_x2, square_y2, square_x1, square_y2
			line square_x1, square_y2, square_x1, square_y1
		return
		// 色判定
		#defcfunc NearColor int px_, int py_, int clr_r_, int clr_g_, int clr_b_
			pget px_, py_
			diff_r = ginfo_r - clr_r_
			diff_g = ginfo_g - clr_g_
			diff_b = ginfo_b - clr_b_
			diff = diff_r * diff_r + diff_g * diff_g + diff_b * diff_b
			if(diff < 100) :return TRUE
		return FALSE
		// 撮影タイミングを指定秒だけ後にズラす
		#defcfunc WaitTime double time
		return int(time * frame_rate@ + 0.5)
		#deffunc GetSquare var px__, var py__, var wx__, var wy__, array square, int rr, int gg, int bb
			x_min = square.0
			x_max = square.0 + square.2
			y_min = square.1
			y_max = square.1 + square.3
			for x, x_min, x_max
				flg = FALSE
				for y, y_min, y_max
					pget x, y
					if((ginfo_r != rr) || (ginfo_g != gg) || (ginfo_b != bb)) :flg = TRUE :_break
				next
				if(flg) :px__ = x :_break
			next
			for y, y_min, y_max
				flg = FALSE
				for x, x_min, x_max
					pget x, y
					if((ginfo_r != rr) || (ginfo_g != gg) || (ginfo_b != bb)) :flg = TRUE :_break
				next
				if(flg) :py__ = y :_break
			next
			for x, x_max - 1, x_min - 1, -1
				flg = FALSE
				for y, y_min, y_max
					pget x, y
					if((ginfo_r != rr) || (ginfo_g != gg) || (ginfo_b != bb)) :flg = TRUE :_break
				next
				if(flg) :wx__ = x - px__ + 1 :_break
			next
			for y, y_max - 1, y_min - 1, -1
				flg = FALSE
				for x, x_min, x_max
					pget x, y
					if((ginfo_r != rr) || (ginfo_g != gg) || (ginfo_b != bb)) :flg = TRUE :_break
				next
				if(flg) :wy__ = y - py__ + 1 :_break
			next
		return
		#deffunc LoadSoftData
			// デフォルト設定で初期化する
			;自動撮影
			auto_cap_flg@ = FALSE	;自動撮影機能
			auto_cap_antiair_cutin_flg@ = TRUE
			auto_cap_day_cutin_flg@     = TRUE
			auto_cap_day_attack_flg@    = TRUE
			auto_cap_night_cutin_flg@   = TRUE
			auto_cap_night_attack_flg@  = TRUE
			auto_cap_broken_flg@        = TRUE
			auto_cap_help_damage_flg@   = TRUE
			auto_cap_bomb_damage_flg@   = TRUE
			;保存設定
			save_buffer_size@ = 10			;保存する前後のフレーム数
			save_buffer_size_index@ = save_buffer_size@ - 1
			frame_rate@ = 5					;保存するfps
			frame_rate_index@ = frame_rate@ - 1
			file_type@ = kFileTypePng@		;保存するファイルタイプ
			save_type@ = kSaveTypeNow@		;保存時のモード
			folder_path@ = ""				;保存時のパス指定
			shortcut_flg@ = FALSE			;ショートカットキー
			;その他
			get_pos_mode@ = kGetPosAuto@
			check_move_flash_flg@ = TRUE	;ズレ補正機能
			// iniファイルを読み込んで設定を反映する
			exist "" + exe_path@ + "\\setting.ini"
			if(strsize != -1){
				// バッファに読み込む
				notesel text_buffer
				noteload exe_path@ + "\\setting.ini"
				// 1行づつ読み込んで処理する
				for k, 0, notemax
					noteget getline, k
					// コメントは削除する
					p = instr(getline,,";")
					if(p != -1) :getline = strmid(getline, 0, p)
					// パラメータである場合のみ反映する
					p = instr(getline,,"=")
					if(p == -1) :_continue
					sdim param_name, 1024
					param_name = strmid(getline, 0, p)
					sdim param_value, 1024
					param_value = strmid(getline, p + 1, strlen(getline) - p - 1)
					//パラメータの種類によって場合分け
					;自動撮影
					if(param_name == "auto_cap") :auto_cap_flg@ = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_antiair_cutin") :auto_cap_antiair_cutin_flg@  = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_day_cutin")     :auto_cap_day_cutin_flg@      = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_day_attack")    :auto_cap_day_attack_flg@     = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_night_cutin")   :auto_cap_night_cutin_flg@    = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_night_attack")  :auto_cap_night_attack_flg@   = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_broken")        :auto_cap_broken_flg@         = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_help_damage")   :auto_cap_help_damage_flg@    = limit(int(param_value), 0, 1) :_continue
					if(param_name == "auto_cap_bomb_damage")   :auto_cap_bomb_damage_flg@    = limit(int(param_value), 0, 1) :_continue
					;保存設定
					if(param_name == "save_buffer_size"){
						save_buffer_size@ = limit(int(param_value), 1, 49)
						save_buffer_size_index@ = save_buffer_size@ - 1
						_continue
					}
					if(param_name == "frame_rate"){
						frame_rate@ = limit(int(param_value), 1, 60)
						frame_rate_index@ = frame_rate@ - 1
						_continue
					}
					if(param_name == "file_type"){
						param_value = getpath(param_value, 16)
						if(param_value == "bmp"){
							file_type@ = kFileTypeBmp@
						}
						if((param_value == "jpg") || (param_value == "jpeg")){
							file_type@ = kFileTypeJpeg@
						}
						if(param_value == "png"){
							file_type@ = kFileTypePng@
						}
						_continue
					}
					if(param_name == "save_type"){
						if(param_value == "past"){
							save_type@ = kSaveTypePast@
						}
						if(param_value == "now"){
							save_type@ = kSaveTypeNow@
						}
						if(param_value == "future"){
							save_type@ = kSaveTypeFuture@
						}
						_continue
					}
					if(param_name == "folder_path") :folder_path@ = param_value :_continue
					if(param_name == "shortcut_key") :shortcut_flg@ = limit(int(param_value), 0, 1) :_continue
					;その他
					if(param_name == "get_pos_mode"){
						if(param_value == "auto"){
							get_pos_mode@ = kGetPosAuto@
						}
						if(param_value == "click"){
							get_pos_mode@ = kGetPosClick@
						}
						if(param_value == "crop"){
							get_pos_mode@ = kGetPosCrop@
						}
						if(param_value == "manual"){
							get_pos_mode@ = kGetPosManual@
						}
						_continue
					}
					if(param_name == "check_move_flash") :check_move_flash_flg@ = limit(int(param_value), 0, 1) :_continue
				next
			}
		return
		#deffunc SaveSoftData
			sdim text_buffer, 32000
			text_buffer += "[自動撮影]\n"
			text_buffer += "auto_cap=" + auto_cap_flg@ + "\n"
			text_buffer += "auto_cap_antiair_cutin=" + auto_cap_antiair_cutin_flg@ + "\n"
			text_buffer += "auto_cap_day_cutin=" + auto_cap_day_cutin_flg@ + "\n"
			text_buffer += "auto_cap_day_attack=" + auto_cap_day_attack_flg@ + "\n"
			text_buffer += "auto_cap_night_cutin=" + auto_cap_night_cutin_flg@ + "\n"
			text_buffer += "auto_cap_night_attack=" + auto_cap_night_attack_flg@ + "\n"
			text_buffer += "auto_cap_broken=" + auto_cap_broken_flg@ + "\n"
			text_buffer += "auto_cap_help_damage=" + auto_cap_help_damage_flg@ + "\n"
			text_buffer += "auto_cap_bomb_damage=" + auto_cap_bomb_damage_flg@ + "\n"
			text_buffer += "\n"
			text_buffer += "[保存設定]\n"
			text_buffer += "save_buffer_size=" + save_buffer_size@ + "\n"
			text_buffer += "frame_rate=" + frame_rate@ + "\n"
			text_buffer += "file_type="
			if(file_type@ == kFileTypeBmp@){
				text_buffer += "bmp\n"
			}else{if(file_type@ == kFileTypeJpeg@){
				text_buffer += "jpg\n"
			}else{if(file_type@ == kFileTypePng@){
				text_buffer += "png\n"
			}else{
				text_buffer += "png\n"
			}}}
			text_buffer += "save_type="
			if(save_type@ == kSaveTypePast@){
				text_buffer += "past\n"
			}else{if(save_type@ == kSaveTypeNow@){
				text_buffer += "now\n"
			}else{if(save_type@ == kSaveTypeFuture@){
				text_buffer += "future\n"
			}else{
				text_buffer += "now\n"
			}}}
			text_buffer += "folder_path=" + folder_path@ + "\n"
			text_buffer += "shortcut_key=" + shortcut_flg@ + "\n"
			text_buffer += "\n"
			text_buffer += "[その他]\n"
			text_buffer += "get_pos_mode="
			if(get_pos_mode@ == kGetPosAuto@){
				text_buffer += "auto\n"
			}else{if(get_pos_mode@ == kGetPosClick@){
				text_buffer += "click\n"
			}else{if(get_pos_mode@ == kGetPosCrop@){
				text_buffer += "crop\n"
			}else{if(get_pos_mode@ == kGetPosManual@){
				text_buffer += "manual\n"
			}else{
				text_buffer += "auto\n"
			}}}}
			text_buffer += "check_move_flash=" + check_move_flash_flg@ + "\n"
			notesel text_buffer
			notesave exe_path@ + "\\setting.ini"
		return
	#global

/* ウィンドウ・バッファ初期化 */
// リングバッファ
	gosub *ring_buffer_init
// 画面バッファ
	buffer kFlashBufferID, kFlashWX + 2, kFlashWY + 2
	buffer kCheckBufferID, kFlashWX + 2, kFlashWY + 2

// オプション画面
	screen kOptionWindowID, POS_X(2), POS_Y(8)
	title "オプション"
	objsize SIZE_X(2), SIZE_Y(1)
		POS_XY 0, 0
			chkbox "対空カットイン", auto_cap_antiair_cutin_flg
		POS_XY 0, 1
			chkbox "昼戦カットイン", auto_cap_day_cutin_flg
		POS_XY 0, 2
			chkbox "昼戦連撃・昼戦砲撃", auto_cap_day_attack_flg
		POS_XY 0, 3
			chkbox "夜戦カットイン", auto_cap_night_cutin_flg
		POS_XY 0, 4
			chkbox "夜戦連撃・夜戦砲撃", auto_cap_night_attack_flg
		POS_XY 0, 5
			chkbox "中破・大破時", auto_cap_broken_flg
		POS_XY 0, 6
			chkbox "支援射撃", auto_cap_help_damage_flg
		POS_XY 0, 7
			chkbox "開幕爆撃", auto_cap_bomb_damage_flg
	gsel kOptionWindowID, -1

// メイン画面
	screen kMainWindowID, kMainWX, kMainWY
	gsel kMainWindowID, 2
	title kSoftName
	// オブジェクト描画
	POS_XY 0, 5
		mesbox soft_log, SIZE_X(3), SIZE_Y(5), 4
		hMesBox = objinfo(stat, 2)
	objsize SIZE_X(1), SIZE_Y(1)
		POS_XY 0, 0
			combox get_pos_mode,,"オート\nクリック\nクロップ\nﾏﾆｭｱﾙ"
			objenable stat, 0
		POS_XY 1, 0
			button gosub "座標取得", *get_pos
		POS_XY 2, 0
			button gosub "画像保存", *set_picture_timer
			save_picture_button_id = stat
		POS_XY 0, 1
			combox save_buffer_size_index,,save_buffer_size_list
		POS_XY 1, 1
			combox frame_rate_index,,frame_rate_list
		POS_XY 2, 1
			combox file_type,,"bmp\npng\njpeg"
		POS_XY 0, 2
			combox save_type,,"過去\n現在\n未来"
		POS_XY 0, 3
			button gosub "参照...", *browse
		POS_XY 0, 4
			button gosub "選択...", *option
			objenable stat, 0
		POS_XY 1, 4
			chkbox "自動撮影", auto_cap_flg
			objenable stat, 0
		POS_XY 2, 4
			chkbox "ズレ補正", check_move_flash_flg
	objsize SIZE_X(2), SIZE_Y(1)
		POS_XY 1, 2
			chkbox "ショートカットキーを使用", shortcut_flg
		POS_XY 1, 3
			input folder_path
			folder_path_id = stat

	objenable save_picture_button_id, FALSE
	objenable folder_path_id, FALSE

/* メインループ */
	save_picture_count = -1
	shortcut_set_flg = FALSE
	save_buffer_size_index_ = save_buffer_size_index
	frame_rate_index_ = frame_rate_index
	auto_cap_flg_ = auto_cap_flg
	dim window_param_, kRectDim
	repeat
		// 終了フラグ
		if(exit_flg) :end
		// 座標が取得されていたら、画像を随時更新する
		if(get_pos_flg){
			FlashScreenShot kRingBufferID + (cnt \ ring_buffer_size), window_handle, flash_position
		}
		// 保存タイマー
		if(save_picture_count == 0) :gosub *save_pictures
		if(save_picture_count > 0) :save_picture_count--
		// 設定変更を反映
		if(save_buffer_size_index_ != save_buffer_size_index){
			save_buffer_size = save_buffer_size_index + 1
			gosub *ring_buffer_init
			PutLog "【設定変更】"
			PutLog "　保存枚数：" + save_buffer_size
			save_buffer_size_index_ = save_buffer_size_index
		}
		if(frame_rate_index_ != frame_rate_index){
			frame_rate = frame_rate_index + 1
			PutLog "【設定変更】"
			PutLog "　フレームレート：" + frame_rate
			frame_rate_index_ = frame_rate_index
		}
		if(auto_cap_flg_ != auto_cap_flg){
			PutLog "【設定変更】"
			if(auto_cap_flg){
				PutLog "　自動撮影：ON"
			}else{
				PutLog "　自動撮影：OFF"
			}
			auto_cap_flg_ = auto_cap_flg
			auto_cap_stop_flg = FALSE
		}
		// 対象ウィンドウの状況を随時監視する
		if(get_pos_flg){
			// ズレ検出・ズレ補正
			GetWindowParam window_handle, window_param_
			if((window_param_(2) == 0) || (window_param_(3) == 0)){
				PutLog "【ズレ検出】"
				PutLog "　対象を見失いました。"
				get_pos_flg = FALSE
				is_special_size_flg = FALSE
				gsel kMainWindowID
				objenable save_picture_button_id, FALSE
			}else{
				if((window_param_(2) != window_param(2)) || (window_param_(3) != window_param(3))){
					// ウィンドウサイズが変わった＝画像位置が動いた可能性がある
					window_param(0) = window_param_(0)
					window_param(1) = window_param_(1)
					window_param(2) = window_param_(2)
					window_param(3) = window_param_(3)
					gosub *get_pos_local
				}else{
					// 艦これの画面の周囲のRGB値から、ズレがないかを判定する
					if(check_move_flash_flg){
						gosub *get_pos_local
					}
				}
			}
		}
		// ショートカットキー
		if(shortcut_flg){
			stick key, kStickMouseR + kStickCtrl, 0
			if(key & kStickMouseR){
				if(key & kStickCtrl){
					if(shortcut_set_flg == FALSE){
						gosub *set_picture_timer
						shortcut_set_flg = TRUE
					}
				}else{
					shortcut_set_flg = FALSE
				}
			}else{
				shortcut_set_flg = FALSE
			}
		}
		// ウェイト
		await 1000 / frame_rate
	loop

/* リングバッファを初期化 */
*ring_buffer_init
	ring_buffer_size = save_buffer_size * 2 + 1	;リングバッファに記録する枚数
	repeat ring_buffer_size
		buffer kRingBufferID + cnt, game_window_size(0, is_special_size_flg), game_window_size(1, is_special_size_flg)
	loop
return

/* 艦これの画面の座標とハンドルを取得する */
*get_pos
	PutLog "【座標取得】"

	// デスクトップのスクリーンショットを取得する
	dim desktop_param, kRectDim	;モニタ全体のオフセットとサイズ
	GetDesktopParam desktop_param
	DesktopScreenShot kDesktopBufferID, desktop_param
	// そこから艦これの画面を探す
	count = Auto@SearchKanCollePos(kDesktopBufferID, rectangles, kTempBufferID)
	if (count == 0) :return
	select_idx = 0
	if (count > 1){
		select_idx = -1
		select_w = 600
		select_h = select_w / 5 * 3
		for k, 0, count
			DesktopScreenShot kDesktopBufferID, desktop_param
			screen kSelectWindowID, select_w, select_h + 24, 4
			gsel kSelectWindowID, 2
			title "艦これの画面なら「選択」、違うなら「次へ」をクリック (" + (k + 1) + "/" + count + ")"
			gzoom select_w, select_h, kDesktopBufferID, rectangles(0, k), rectangles(1, k), rectangles(2, k), rectangles(3, k)
			color 192, 0, 0
			boxf 0, select_h, 80, select_h + 24
			color 0, 0, 192
			boxf 80, select_h, 160, select_h + 24
			color 255, 255, 255
			font msgothic, 24, 1
			pos 0, select_h
			mes "選択"
			pos 80, select_h
			mes "次へ"
			select_flg = 0
			repeat
				stick ky, 256
				if (ky & 256) {
					my = mousey
					mx = mousex
					logmes "" + mx + "," + my + " " + select_idx + " " + select_flg
					if ((my >= select_h) && (mx < 160)) {
						if (mx < 80){
							select_idx = k
							select_flg = 1
							break
						}else{
							break
						}
					}
				}
				await 10
			loop
			gsel kSelectWindowID, -1
			if (select_flg == 1){
				_break
			}
		next
	}
	if(select_idx < 0) :return
	is_special_size_flg = TRUE
	flash_position(0) = rectangles(0, select_idx)
	flash_position(1) = rectangles(1, select_idx)
	game_window_size(0, 1) = rectangles(2, select_idx)
	game_window_size(1, 1) = rectangles(3, select_idx)
	get_pos_flg = TRUE
	gsel kMainWindowID
	objenable save_picture_button_id, TRUE
	flash_point.0 = flash_position(0) + desktop_param(0) + 100, flash_position(1) + desktop_param(1) + 100
	window_handle = GetWindowHandle(flash_point)
	PutLog "　ウィンドウハンドル：" + window_handle
	PutLog "　ウィンドウ左上座標：" + window_param(0) + "," + window_param(1)
	PutLog "　ウィンドウサイズ：" + window_param(2) + "," + window_param(3)
	PutLog "　ゲーム相対左上座標：" + flash_position(0) + "," + flash_position(1)
	PutLog "　ゲーム画面サイズ：" + game_window_size(0, 1) + "," + game_window_size(1, 1)
	// マニュアルモード対応のための特殊処理
	buffer kCheckBufferID, game_window_size(0, is_special_size_flg) + 2, game_window_size(1, is_special_size_flg) + 2
	gosub *ring_buffer_init
return

/* 艦これの座標を取得し直す */
*get_pos_local
	DesktopScreenShot kDesktopBufferID, desktop_param
	if(isValidRect@SearchKanCollePos(kDesktopBufferID, flash_position(0), flash_position(1), game_window_size(0, 1), game_window_size(1, 1)) == 0){
		PutLog "【ズレ検出】"
		count = Auto@SearchKanCollePos(kDesktopBufferID, rectangles, kTempBufferID)
		if (count == 0) :PutLog "　※座標を再取得できませんでした。" :return
		flash_position(0) = rectangles(0, 0)
		flash_position(1) = rectangles(1, 0)
		game_window_size(0, 1) = rectangles(2, 0)
		game_window_size(1, 1) = rectangles(3, 0)
		PutLog "　ゲーム相対左上座標：" + flash_position(0) + "," + flash_position(1)
	}
return

/* リングバッファに保存するためのタイマーを仕掛ける */
*set_picture_timer
	if(get_pos_flg == FALSE) :return
	switch save_type
		case kSaveTypePast
			save_picture_count = 0
		swbreak
		case kSaveTypeNow
			save_picture_count = save_buffer_size
		swbreak
		case kSaveTypeFuture
			save_picture_count = save_buffer_size * 2
		swbreak
	swend
return

/* リングバッファの画像を保存する */
*save_pictures
	if(get_pos_flg == FALSE) :return
	PutLog "【画像保存】"
	PutLog "　画像保存中……"
	filename = NowTime()
	if(folder_path != ""){
		filename = folder_path + "\\" + filename
	}
	switch file_type
		case kFileTypeBmp
			for k, 0, ring_buffer_size
				gsel kRingBufferID + (k + cnt + 1) \ ring_buffer_size
				bmpsave filename + "_" + strf("%02d", k + 1) + ".bmp"
			next
		swbreak
		case kFileTypePng
			cvbuffer kCVFlashBufferID, game_window_size(0, is_special_size_flg), game_window_size(1, is_special_size_flg)
			for k, 0, ring_buffer_size
				gsel kRingBufferID + (k + cnt + 1) \ ring_buffer_size
				cvputimg kCVFlashBufferID
				cvsave filename + "_" + strf("%02d", k + 1) + ".png", kCVFlashBufferID
			next
		swbreak
		case kFileTypeJpeg
			cvbuffer kCVFlashBufferID, game_window_size(0, is_special_size_flg), game_window_size(1, is_special_size_flg)
			for k, 0, ring_buffer_size
				gsel kRingBufferID + (k + cnt + 1) \ ring_buffer_size
				cvputimg kCVFlashBufferID
				cvsave filename + "_" + strf("%02d", k + 1) + ".jpg", kCVFlashBufferID
			next
		swbreak
	swend
	PutLog "　画像保存完了"
	save_picture_count = -1
	auto_cap_stop_flg = FALSE
return

/* フォルダ参照 */
*browse
	selfolder folder_path,"保存先フォルダ"
	gsel kMainWindowID
	objprm folder_path_id, folder_path
return

/* 設定画面表示 */
*option
	gsel kOptionWindowID, 2
return

/* 終了時の処理(Windows 8以降用対策) */
*exit
	if(wparam != kMainWindowID){
			gsel wparam, -1
	}else{
		SaveSoftData
		exit_flg = TRUE
	}
return
